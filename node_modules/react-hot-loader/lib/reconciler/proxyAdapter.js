'use strict';

exports.__esModule = true;
exports.proxyWrapper = exports.renderReconciler = exports.RENDERED_GENERATION = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reactHotLoader = require('../reactHotLoader');

var _reactHotLoader2 = _interopRequireDefault(_reactHotLoader);

var _generation = require('../global/generation');

var _proxies = require('./proxies');

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RENDERED_GENERATION = exports.RENDERED_GENERATION = 'REACT_HOT_LOADER_RENDERED_GENERATION';

var renderReconciler = exports.renderReconciler = function renderReconciler(target, force) {
  // we are not inside parent reconcilation
  var currentGeneration = (0, _generation.get)();
  if (!_reactHotLoader2.default.disableProxyCreation) {
    if ((target[RENDERED_GENERATION] || force) && target[RENDERED_GENERATION] !== currentGeneration) {
      (0, _index2.default)(target);
    }
  }
  target[RENDERED_GENERATION] = currentGeneration;
};

var proxyWrapper = exports.proxyWrapper = function proxyWrapper(element) {
  // post wrap on post render
  if (!element) {
    return element;
  }
  if (Array.isArray(element)) {
    return element.map(proxyWrapper);
  }
  if (typeof element.type === 'function') {
    var proxy = (0, _proxies.getProxyByType)(element.type);
    if (proxy) {
      return _extends({}, element, {
        type: proxy.get()
      });
    }
  }
  return element;
};

(0, _proxies.setStandInOptions)({
  preRender: renderReconciler,
  postRender: proxyWrapper
});